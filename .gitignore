import flet as ft
import backend  # Importa nosso m√≥dulo de backend

def main(page: ft.Page):
    page.title = "Ranking de Jogadores"
    page.vertical_alignment = ft.MainAxisAlignment.START
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.theme_mode = ft.ThemeMode.DARK
    page.window_width = 800
    page.window_height = 600

    # --- Componentes da Interface ---

    # Tabela para exibir os dados do ranking
    tabela_ranking = ft.DataTable(
        columns=[
            ft.DataColumn(ft.Text("Pos.", weight=ft.FontWeight.BOLD)),
            ft.DataColumn(ft.Text("Nome", weight=ft.FontWeight.BOLD)),
            ft.DataColumn(ft.Text("N√≠vel", weight=ft.FontWeight.BOLD), numeric=True),
            ft.DataColumn(ft.Text("Pontua√ß√£o", weight=ft.FontWeight.BOLD), numeric=True),
        ],
        rows=[],
        column_spacing=60,
        data_row_min_height=40,
    )

    # --- Fun√ß√µes de Evento (Callbacks) ---

    def exibir_ranking_selecionado(e):
        """Callback acionado quando o usu√°rio seleciona uma data no Dropdown."""
        data_selecionada = dropdown_listas.value
        if not data_selecionada:
            return

        # 1. Carrega os dados usando a fun√ß√£o do backend
        ranking = backend.carregar_ranking_por_data(data_selecionada)

        # 2. Limpa as linhas existentes da tabela
        tabela_ranking.rows.clear()
        
        # 3. √çcones para o TOP 3 (CORRE√á√ÉO APLICADA AQUI)
        icones = [
            ft.Icon(name=ft.Icons.EMOJI_EVENTS, color=ft.Colors.AMBER),
            ft.Icon(name=ft.Icons.EMOJI_EVENTS, color=ft.Colors.BLUE_GREY_200),
            ft.Icon(name=ft.Icons.EMOJI_EVENTS, color=ft.Colors.BROWN_400),
        ]

        # 4. Popula a tabela com os novos dados
        for i, jogador in enumerate(ranking):
            posicao_cell = ft.DataCell(
                ft.Row([
                    icones[i] if i < 3 else ft.Container(width=24), # Adiciona √≠cone ou espa√ßo
                    ft.Text(f"{i+1}¬∫")
                ])
            )
            
            tabela_ranking.rows.append(
                ft.DataRow(
                    cells=[
                        posicao_cell,
                        ft.DataCell(ft.Text(jogador.nome)),
                        ft.DataCell(ft.Text(str(jogador.nivel))),
                        ft.DataCell(ft.Text(f"{jogador.pontuacao:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))), # Formata√ß√£o BR
                    ]
                )
            )
        
        page.update()

    # --- L√≥gica de Inicializa√ß√£o ---
    
    # 1. Processa o CSV e popula o BD ao iniciar a aplica√ß√£o
    backend.criar_banco_de_dados()
    backend.processar_csv()
    
    # 2. Obt√©m as listas de ranking do backend
    listas_disponiveis = backend.obter_listas_de_ranking()
    opcoes_dropdown = [ft.dropdown.Option(data) for data in listas_disponiveis]

    # 3. Cria o Dropdown com as listas
    dropdown_listas = ft.Dropdown(
        label="Selecione a Data do Ranking",
        options=opcoes_dropdown,
        on_change=exibir_ranking_selecionado,
        width=300,
    )

    # --- Montagem da P√°gina ---
    
    page.add(
        ft.Column(
            [
                ft.Text("üèÜ Ranking de Jogadores üèÜ", size=32, weight=ft.FontWeight.BOLD, text_align=ft.TextAlign.CENTER),
                ft.Divider(),
                dropdown_listas,
                ft.Container(height=20),
                ft.Column([tabela_ranking], scroll=ft.ScrollMode.AUTO, expand=True) # Coluna rol√°vel
            ],
            alignment=ft.MainAxisAlignment.START,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            expand=True,
        )
    )
    page.update()

# --- Ponto de Entrada da Aplica√ß√£o ---
if __name__ == "__main__":
    ft.app(target=main)
