import flet as ft
import backend  # Importa nosso m√≥dulo de backend

def main(page: ft.Page):
    page.title = "Ranking de Jogadores"
    page.vertical_alignment = ft.MainAxisAlignment.START
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.theme_mode = ft.ThemeMode.DARK
    page.window_width = 800
    page.window_height = 600

    # --- Fun√ß√µes de Atualiza√ß√£o da UI ---

    def atualizar_dropdown_rankings():
        """Busca os rankings no BD e atualiza o componente Dropdown."""
        listas_disponiveis = backend.obter_listas_de_ranking()
        dropdown_listas.options.clear()
        for data in listas_disponiveis:
            dropdown_listas.options.append(ft.dropdown.Option(data))
        page.update()

    def exibir_ranking_selecionado(e):
        """Callback acionado quando o usu√°rio seleciona uma data no Dropdown."""
        tabela_ranking.rows.clear()
        page.update()

        data_selecionada = dropdown_listas.value
        if not data_selecionada:
            return

        ranking = backend.carregar_ranking_por_data(data_selecionada)
        
        icones = [
            ft.Icon(name=ft.Icons.EMOJI_EVENTS, color=ft.Colors.AMBER),
            ft.Icon(name=ft.Icons.EMOJI_EVENTS, color=ft.Colors.BLUE_GREY_200),
            ft.Icon(name=ft.Icons.EMOJI_EVENTS, color=ft.Colors.BROWN_400),
        ]

        for i, jogador in enumerate(ranking):
            posicao_cell = ft.DataCell(
                ft.Row([
                    icones[i] if i < 3 else ft.Container(width=24),
                    ft.Text(f"{i+1}¬∫")
                ])
            )
            tabela_ranking.rows.append(
                ft.DataRow(
                    cells=[
                        posicao_cell,
                        ft.DataCell(ft.Text(jogador.nome)),
                        ft.DataCell(ft.Text(str(jogador.nivel))),
                        ft.DataCell(ft.Text(f"{jogador.pontuacao:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))),
                    ]
                )
            )
        page.update()

    # --- Fun√ß√µes de Evento para o FilePicker ---

    def resultado_do_picker(e: ft.FilePickerResultEvent):
        """Callback acionado ap√≥s o usu√°rio selecionar um arquivo."""
        if e.files:
            caminho_arquivo = e.files[0].path
            jogadores_importados = backend.processar_csv(caminho_arquivo)
            
            if jogadores_importados > 0:
                msg = f"{jogadores_importados} jogadores importados com sucesso!"
                cor_fundo = ft.Colors.GREEN_700
            elif jogadores_importados == 0:
                msg = "Nenhum jogador v√°lido encontrado no arquivo selecionado."
                cor_fundo = ft.Colors.AMBER_800
            else:
                msg = "Erro ao abrir ou processar o arquivo."
                cor_fundo = ft.Colors.RED_800

            page.snack_bar = ft.SnackBar(ft.Text(msg), bgcolor=cor_fundo)
            page.snack_bar.open = True
            
            atualizar_dropdown_rankings()
        else:
            page.snack_bar = ft.SnackBar(ft.Text("Opera√ß√£o cancelada."))
            page.snack_bar.open = True
            page.update()

    # --- Componentes da Interface ---

    file_picker = ft.FilePicker(on_result=resultado_do_picker)
    page.overlay.append(file_picker)

    # Bot√£o que aciona o FilePicker (CORRE√á√ÉO APLICADA AQUI)
    botao_importar = ft.ElevatedButton(
        "Importar CSV",
        icon=ft.Icons.UPLOAD_FILE,  # Era ft.icons.UPLOAD_FILE
        on_click=lambda _: file_picker.pick_files(
            allow_multiple=False,
            allowed_extensions=["csv"]
        )
    )

    dropdown_listas = ft.Dropdown(
        label="Selecione a Data do Ranking",
        options=[],
        on_change=exibir_ranking_selecionado,
        width=300,
    )

    tabela_ranking = ft.DataTable(
        columns=[
            ft.DataColumn(ft.Text("Pos.", weight=ft.FontWeight.BOLD)),
            ft.DataColumn(ft.Text("Nome", weight=ft.FontWeight.BOLD)),
            ft.DataColumn(ft.Text("N√≠vel", weight=ft.FontWeight.BOLD), numeric=True),
            ft.DataColumn(ft.Text("Pontua√ß√£o", weight=ft.FontWeight.BOLD), numeric=True),
        ],
        rows=[],
        column_spacing=60,
        data_row_min_height=40,
    )

    # --- L√≥gica de Inicializa√ß√£o ---
    
    backend.criar_banco_de_dados()
    atualizar_dropdown_rankings()

    # --- Montagem da P√°gina ---
    
    page.add(
        ft.Column(
            [
                ft.Text("üèÜ Ranking de Jogadores üèÜ", size=32, weight=ft.FontWeight.BOLD, text_align=ft.TextAlign.CENTER),
                ft.Divider(),
                ft.Row([botao_importar, dropdown_listas], alignment=ft.MainAxisAlignment.CENTER, spacing=20),
                ft.Container(height=20),
                ft.Column([tabela_ranking], scroll=ft.ScrollMode.ALWAYS, expand=True)
            ],
            alignment=ft.MainAxisAlignment.START,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            expand=True,
        )
    )
    page.update()

# --- Ponto de Entrada da Aplica√ß√£o ---
if __name__ == "__main__":
    ft.app(target=main)
